var searchIndex = {};
searchIndex['ndarray'] = {"items":[[0,"","ndarray","The `ndarray` crate provides the `Array` type, an n-dimensional\nnumerical container similar to numpy's ndarray.\n"],[1,"Array","","N-dimensional array."],[1,"Elements","","An iterator over the elements of an array."],[1,"ElementsMut","","An iterator over the elements of an array."],[1,"Slice","","Description of a range of an array axis."],[4,"Ix","",""],[5,"C","","Full range as slice."],[6,"Dimension","","Trait for the shape and index types of arrays."],[9,"ndim","","",0],[10,"shape","","",0],[10,"shape_mut","","",0],[10,"size","","",0],[10,"default_strides","","",0],[10,"next_for","","Iteration -- Use self as size, and return next index after `index`\nor None if there are no more.",0],[6,"Shrink","","Helper trait to define a smaller-than relation for array shapes."],[10,"from_slice","","",1],[10,"ndim","","",2],[10,"next_for","","",2],[10,"clone","","",3],[10,"zeros","","Construct an Array with zeros",3],[10,"from_elem","","Construct an Array with copies of `elem`",3],[10,"from_vec","","Create a one-dimensional array from a vector (no allocation needed)",3],[10,"from_iter","","Create a one-dimensional array from an iterator",3],[10,"from_slice","","Create a one-dimensional array from a slice",3],[10,"from_slices","","Create a two-dimensional array from a slice",3],[10,"from_vec_dim","","Unsafe because dimension is unchecked.",3],[10,"dim","","",3],[10,"shape","","",3],[10,"slice","","Return a sliced array.",3],[10,"islice","","Like `slice`, except this array's view is mutated in place",3],[10,"slice_iter","","Iterate over the sliced view",3],[10,"at","","Return a reference to the element at `index`, or return `None`\nif the index is out of bounds.",3],[10,"iter","","Return an iterator of references to the elements of the Array",3],[10,"iat_sub","","Collapse dimension `axis` into length one,\nand select the subview of `index` along that axis.",3],[10,"broadcast_iter","","Act like a larger size and/or dimension Array by *broadcasting*\ninto a larger shape, if possible.",3],[10,"at_sub","","Select the subview `index` along `axis` and return the reduced\ndimension array.",3],[10,"index","","",3],[10,"at_mut","","Return a mutable reference to the element at `index`, or return `None`\nif the index is out of bounds.",3],[10,"iter_mut","","Return an iterator of mutable references to the elements of the Array",3],[10,"slice_iter_mut","","Return an iterator of mutable references into the sliced view\nof the array.",3],[10,"sub_iter_mut","","Select the subview `index` along `axis` and return an iterator\nof the subview.",3],[10,"reshape","","Transform the array into `shape`, must correspond\nto the same number of elements.",3],[10,"index_mut","","",3],[10,"row_iter","","",3],[10,"col_iter","","",3],[10,"iter1d","","",3],[10,"diag_iter","","",3],[10,"diag","","",3],[10,"fmt","","",3],[10,"eq","","",3],[10,"iadd","","Perform an elementwise arithmetic operation between `self` and `other`,\n*in place*.",3],[10,"add","","Perform an elementwise arithmetic operation between `self` and `other`,\nand return the result.",3],[10,"isub","","Perform an elementwise arithmetic operation between `self` and `other`,\n*in place*.",3],[10,"sub","","Perform an elementwise arithmetic operation between `self` and `other`,\nand return the result.",3],[10,"imul","","Perform an elementwise arithmetic operation between `self` and `other`,\n*in place*.",3],[10,"mul","","Perform an elementwise arithmetic operation between `self` and `other`,\nand return the result.",3],[10,"idiv","","Perform an elementwise arithmetic operation between `self` and `other`,\n*in place*.",3],[10,"div","","Perform an elementwise arithmetic operation between `self` and `other`,\nand return the result.",3],[10,"irem","","Perform an elementwise arithmetic operation between `self` and `other`,\n*in place*.",3],[10,"rem","","Perform an elementwise arithmetic operation between `self` and `other`,\nand return the result.",3],[10,"ibitand","","Perform an elementwise arithmetic operation between `self` and `other`,\n*in place*.",3],[10,"bitand","","Perform an elementwise arithmetic operation between `self` and `other`,\nand return the result.",3],[10,"ibitor","","Perform an elementwise arithmetic operation between `self` and `other`,\n*in place*.",3],[10,"bitor","","Perform an elementwise arithmetic operation between `self` and `other`,\nand return the result.",3],[10,"ibitxor","","Perform an elementwise arithmetic operation between `self` and `other`,\n*in place*.",3],[10,"bitxor","","Perform an elementwise arithmetic operation between `self` and `other`,\nand return the result.",3],[10,"ineg","","Perform an elementwise negation of `self`, *in place*.",3],[10,"neg","","Perform an elementwise negation of `self` and return the result.",3],[10,"clone","","",4],[10,"next","","",4],[10,"next","","",5],[10,"fmt","","",6],[10,"hash","","",6],[10,"eq","","",6],[10,"ne","","",6],[10,"clone","","",6],[10,"mat_mul","","Matrix multiplication of arrays `self` and `other`",3]],"paths":[[6,"Dimension"],[6,"Shrink"],[4,"Ix"],[1,"Array"],[1,"Elements"],[1,"ElementsMut"],[1,"Slice"]]};
initSearch(searchIndex);
