var searchIndex = {};
searchIndex['ndarray'] = {"items":[[0,"","ndarray","The **ndarray** crate provides the **Array** type, an n-dimensional\nnumerical container similar to numpy's ndarray.\n"],[1,"Array","","The **Array** type is an *N-dimensional array*."],[1,"Elements","","An iterator over the elements of an array."],[1,"ElementsMut","","An iterator over the elements of an array."],[1,"Si","","A slice, a description of a range of an array axis."],[3,"arr0","","Return a zero-dimensional array with the element `x`."],[3,"arr1","","Return a one-dimensional array with elements from `xs`."],[3,"arr2","","Return a two-dimensional array with elements from `xs`."],[4,"Ix","","Array index type"],[4,"Ixs","","Array index type (signed)"],[5,"S","","Slice value for the full range of an axis."],[6,"Dimension","","Trait for the shape and index types of arrays."],[9,"ndim","","",0],[10,"shape","","",0],[10,"shape_mut","","",0],[10,"size","","",0],[10,"default_strides","","",0],[10,"first_index","","",0],[10,"next_for","","Iteration -- Use self as size, and return next index after `index`\nor None if there are no more.",0],[10,"stride_offset","","Return stride offset for index.",0],[6,"Shrink","","Helper trait to define a smaller-than relation for array shapes."],[10,"from_slice","","",1],[10,"ndim","","",2],[10,"next_for","","",2],[10,"stride_offset","","Self is an index, return the stride offset",2],[10,"ndim","collections::vec","",3],[10,"shape","","",3],[10,"shape_mut","","",3],[10,"clone","ndarray","",4],[10,"zeros","","Construct an Array with zeros",4],[10,"from_elem","","Construct an Array with copies of `elem`",4],[10,"from_vec","","Create a one-dimensional array from a vector (no allocation needed)",4],[10,"from_iter","","Create a one-dimensional array from an iterator",4],[10,"from_slice","","Create a one-dimensional array from a slice",4],[10,"from_slices","","Create a two-dimensional array from a slice",4],[10,"from_vec_dim","","Unsafe because dimension is unchecked.",4],[10,"dim","","",4],[10,"shape","","",4],[10,"is_standard_layout","","Return `true` if the array data is laid out in\ncontiguous “C order” where the last index is the most rapidly\nvarying.",4],[10,"raw_data","","Return a slice of the array's backing data in memory order.",4],[10,"slice","","Return a sliced array.",4],[10,"islice","","Like `slice`, except this array's view is mutated in place",4],[10,"slice_iter","","Iterate over the sliced view",4],[10,"at","","Return a reference to the element at `index`, or return `None`\nif the index is out of bounds.",4],[10,"iter","","Return an iterator of references to the elements of the Array",4],[10,"isubview","","Collapse dimension `axis` into length one,\nand select the subview of `index` along that axis.",4],[10,"broadcast_iter","","Act like a larger size and/or dimension Array by *broadcasting*\ninto a larger shape, if possible.",4],[10,"swap_axes","","Swap axes `ax` and `bx`.",4],[10,"subview","","Select the subview `index` along `axis` and return the reduced\ndimension array.",4],[10,"index","","",4],[10,"at_mut","","Return a mutable reference to the element at `index`, or return `None`\nif the index is out of bounds.",4],[10,"iter_mut","","Return an iterator of mutable references to the elements of the Array",4],[10,"slice_iter_mut","","Return an iterator of mutable references into the sliced view\nof the array.",4],[10,"sub_iter_mut","","Select the subview `index` along `axis` and return an iterator\nof the subview.",4],[10,"raw_data_mut","","Return a mutable slice of the array's backing data in memory order.",4],[10,"reshape","","Transform the array into `shape`, must correspond\nto the same number of elements.",4],[10,"assign","","Perform an elementwise assigment to `self` from `other`.",4],[10,"assign_scalar","","Perform an elementwise assigment to `self` from scalar `x`.",4],[10,"index_mut","","",4],[10,"row_iter","","",4],[10,"col_iter","","",4],[10,"iter1d","","",4],[10,"diag_iter","","",4],[10,"diag","","",4],[10,"sum","","Return sum along `axis`",4],[10,"mean","","Return mean along `axis`",4],[10,"fmt","","",4],[10,"eq","","Return `true` if all elements of `self` and `other` are equal.",4],[10,"iadd","","Perform an elementwise arithmetic operation between `self` and `other`,\n*in place*.",4],[10,"iadd_scalar","","Perform an elementwise arithmetic operation between `self` and the scalar `x`,\n*in place*.",4],[10,"add","","Perform an elementwise arithmetic operation between `self` and `other`,\nand return the result.",4],[10,"isub","","Perform an elementwise arithmetic operation between `self` and `other`,\n*in place*.",4],[10,"isub_scalar","","Perform an elementwise arithmetic operation between `self` and the scalar `x`,\n*in place*.",4],[10,"sub","","Perform an elementwise arithmetic operation between `self` and `other`,\nand return the result.",4],[10,"imul","","Perform an elementwise arithmetic operation between `self` and `other`,\n*in place*.",4],[10,"imul_scalar","","Perform an elementwise arithmetic operation between `self` and the scalar `x`,\n*in place*.",4],[10,"mul","","Perform an elementwise arithmetic operation between `self` and `other`,\nand return the result.",4],[10,"idiv","","Perform an elementwise arithmetic operation between `self` and `other`,\n*in place*.",4],[10,"idiv_scalar","","Perform an elementwise arithmetic operation between `self` and the scalar `x`,\n*in place*.",4],[10,"div","","Perform an elementwise arithmetic operation between `self` and `other`,\nand return the result.",4],[10,"irem","","Perform an elementwise arithmetic operation between `self` and `other`,\n*in place*.",4],[10,"irem_scalar","","Perform an elementwise arithmetic operation between `self` and the scalar `x`,\n*in place*.",4],[10,"rem","","Perform an elementwise arithmetic operation between `self` and `other`,\nand return the result.",4],[10,"ibitand","","Perform an elementwise arithmetic operation between `self` and `other`,\n*in place*.",4],[10,"ibitand_scalar","","Perform an elementwise arithmetic operation between `self` and the scalar `x`,\n*in place*.",4],[10,"bitand","","Perform an elementwise arithmetic operation between `self` and `other`,\nand return the result.",4],[10,"ibitor","","Perform an elementwise arithmetic operation between `self` and `other`,\n*in place*.",4],[10,"ibitor_scalar","","Perform an elementwise arithmetic operation between `self` and the scalar `x`,\n*in place*.",4],[10,"bitor","","Perform an elementwise arithmetic operation between `self` and `other`,\nand return the result.",4],[10,"ibitxor","","Perform an elementwise arithmetic operation between `self` and `other`,\n*in place*.",4],[10,"ibitxor_scalar","","Perform an elementwise arithmetic operation between `self` and the scalar `x`,\n*in place*.",4],[10,"bitxor","","Perform an elementwise arithmetic operation between `self` and `other`,\nand return the result.",4],[10,"ishl","","Perform an elementwise arithmetic operation between `self` and `other`,\n*in place*.",4],[10,"ishl_scalar","","Perform an elementwise arithmetic operation between `self` and the scalar `x`,\n*in place*.",4],[10,"shl","","Perform an elementwise arithmetic operation between `self` and `other`,\nand return the result.",4],[10,"ishr","","Perform an elementwise arithmetic operation between `self` and `other`,\n*in place*.",4],[10,"ishr_scalar","","Perform an elementwise arithmetic operation between `self` and the scalar `x`,\n*in place*.",4],[10,"shr","","Perform an elementwise arithmetic operation between `self` and `other`,\nand return the result.",4],[10,"ineg","","Perform an elementwise negation of `self`, *in place*.",4],[10,"neg","","Perform an elementwise negation of `self` and return the result.",4],[10,"inot","","Perform an elementwise unary not of `self`, *in place*.",4],[10,"not","","Perform an elementwise unary not of `self` and return the result.",4],[10,"clone","","",5],[10,"next","","",5],[10,"size_hint","","",5],[10,"next","","",6],[10,"size_hint","","",6],[10,"fmt","","",7],[10,"hash","","",7],[10,"eq","","",7],[10,"ne","","",7],[10,"clone","","",7],[10,"mat_mul","","Matrix multiplication of arrays `self` and `other`",4],[10,"from_iter","","",4],[10,"hash","","",4]],"paths":[[6,"Dimension"],[6,"Shrink"],[4,"Ix"],[1,"Vec"],[1,"Array"],[1,"Elements"],[1,"ElementsMut"],[1,"Si"]]};
initSearch(searchIndex);
